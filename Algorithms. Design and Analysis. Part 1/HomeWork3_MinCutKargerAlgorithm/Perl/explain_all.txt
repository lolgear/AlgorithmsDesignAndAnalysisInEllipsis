1) input.txt - input_test.txt dup
2) input_test.txt - input test data
3) input_natural.txt - input real data (what you need if you pass test)
4) count.pl - example of runner, which executes your algorithm several times. (READ WARNING BELOW!)

Summary:

The file contains the adjacency list representation of a simple undirected graph.
There are 200 vertices labeled 1 to 200.
The first column in the file represents the vertex label,
and the particular row (other entries except the first column)
tells all the vertices that the vertex is adjacent to.
So for example, the 6th row looks like : "6 155 56 52 120 ......".
This just means that the vertex with label 6 is adjacent to (i.e., shares an edge with)
the vertices with labels 155,56,52,120,......,etc

Your task is to code up and run the randomized contraction algorithm for the
min cut problem and use it on the above graph to compute the min cut.
(HINT: Note that you'll have to figure out an implementation of edge contractions.
Initially, you might want to do this naively, creating a new graph from the old every
time there's an edge contraction.
But you should also think about more efficient implementations.)
(WARNING: please make sure to run the algorithm many times
with different random seeds, and remember the smallest cut that you ever find.)

Data:

All input files store graph in adjency list representation.
Graph is simple and undirected.
All nodes labeled by integer numbers, separated by space/tab (whitespace symbol).
Each line is a node with its connections.
Example: ( test )
Two cliques separated by a min cut:


    3--4-----5--6
    |\/|     |\/|
    |/\|     |/\|
    2--1-----7--8


1 2 3 4 7
2 1 3 4
3 1 2 4
4 1 2 3 5
5 4 6 7 8
6 5 7 8
7 1 5 6 8
8 5 6 7

expected result: 2
cuts are [(1,7), (4,5)]

Hints:
# -------- Functions -------- #
# ---- Data Manipulation ---- #
# data manipulation
sub readData{
	my $graph = shift;
	my $inputFile = "input.txt";
	open my $fh,"<",$inputFile;
	while (<$fh>){
		chomp;
		my ($a, $b) = split (/ /);
		addNode($graph,$a,$b);
	}
}

sub createNode{
	my ($graph,$node) = @_;
		unless(exists $graph->{$node}){
		$graph->{$node} = {
			# put necessary info here or something else
		};
	}
}

sub addNode{
	my ($graph,$node,$connect) = @_;
	my $ward = 1;
	createNode($graph,$node);
	createNode($graph,$connect);
	#
}

# Or choose your graph representation.
