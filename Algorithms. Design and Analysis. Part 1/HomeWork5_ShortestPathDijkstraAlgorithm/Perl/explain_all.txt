1) input_natural.txt - real data
2) input.txt - dup of real data
3) test1.txt - test data
4) homework.pl -  Perl algorithm implementation.

Note: You can use Perl implementation as an example, but it is not ideal, so
try to write your code more cleaner

Summary:
The file contains an adjacency list representation of an undirected weighted graph with
200 vertices labeled 1 to 200.
Each row consists of the node tuples that are adjacent to that particular vertex along
with the length of that edge.
For example, the 6th row has 6 as the first entry indicating that this row
corresponds to the vertex labeled 6.
The next entry of this row "141,8200" indicates that there is an edge
between vertex 6 and vertex 141 that has length 8200.
The rest of the pairs of this row indicate the other vertices
adjacent to vertex 6 and the lengths of the corresponding edges.

Your task is to run Dijkstra's shortest-path algorithm on this graph,
using 1 (the first vertex) as the source vertex,
and to compute the shortest-path distances between 1 and every other vertex of the graph.
If there is no path between a vertex v and vertex 1,
we'll define the shortest-path distance between 1 and v to be 1000000.

You should report the shortest-path distances to the following ten vertices,
in order: 7,37,59,82,99,115,133,165,188,197.
You should encode the distances as a comma-separated string of integers.
So if you find that all ten of these vertices
except 115 are at distance 1000 away from vertex 1 and 115 is 2000 distance away,
then your answer should be 1000,1000,1000,1000,1000,2000,1000,1000,1000,1000.
Remember the order of reporting DOES MATTER,
and the string should be in the same order in which the above ten vertices are given.

Answers:
input:
7,37,59,82,99,115,133,165,188,197 ->
2599,2610,2947,2052,2367,2399,2029,2442,2505,3068

test1:
1,2,3,4,5,6
0,7,9,20,20,11

Hints:
Note, here you run algorithm with targeted vertices ( ten vertices above )
you can execute `perl homework.pl input.txt` to run Perl algorithm implementation on real data.

Note, here you run algorithm without targeted vertices ( all graph vertices in use )
you can execute `perl homework.pl test1.txt` to run Perl algorithm implementation on test data.
you can execute `perl homework.pl input_natural.txt` to run Perl algorithm implementation on real data.

